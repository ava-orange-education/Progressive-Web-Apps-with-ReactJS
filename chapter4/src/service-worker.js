/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';
import { openDB } from 'idb';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.
// Service worker code to enable offline support

const CACHE_NAME = 'my-pwa-cache';
const urlsToCache = [
  '/',
  '/index.html',
  '/static/css/main.*.css',
  '/static/js/main.*.js',
  '/media/logo.*.svg'
  // Add more URLs to cache as needed
];

self.addEventListener('install', (event) => {

  event.waitUntil(
    caches.open(CACHE_NAME).then((cache) => {
      console.log('Opened cache');
      return cache.addAll(urlsToCache);
    })
  );
});

self.addEventListener('fetch', (event) => {
  event.respondWith(
    caches.match(event.request).then((response) => {
      return response || fetch(event.request);
    })
  );
});

// Register for background sync
self.addEventListener('sync', event => {
  if (event.tag === 'syncData') {
    event.waitUntil(syncData());
  }
});

async function syncData() {
  try {
    // Retrieve queued tasks from storage
    const queuedTasks = await getQueuedTasks();

    // Synchronize data with the server
    await Promise.all(queuedTasks.map(task => syncTask(task)));
    
    // Clear queued tasks from storage
    await clearQueuedTasks();
  } catch (error) {
    console.error('Error synchronizing data:', error);
  }
}

// Retrieve queued tasks from IndexedDB
async function getQueuedTasks() {
  try {
    // Open a connection to IndexedDB
    const db = await openDB('taskQueue', 1);

    // Retrieve all tasks from the object store
    const tasks = await db.getAll('tasks');
    
    return tasks.map(task => task.task);
  } catch (error) {
    console.error('Error retrieving queued tasks:', error);
    return [];
  }
}

// Perform data synchronization with the server
async function syncTask(task) {
  console.log('Task synchronized in process:', task);
  try {
    // Assume there's an API endpoint for task synchronization
    const response = await fetch('https://example.com/api/tasks', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(task)
    });

    if (response.ok) {
      console.log('Task synchronized successfully:', task);
    } else {
      console.error('Failed to synchronize task:', task);
    }
  } catch (error) {
    console.error('Error synchronizing task:', error);
  }
}


// Clear queued tasks from IndexedDB
async function clearQueuedTasks() {
  try {
    // Open a connection to IndexedDB
    const db = await openDB('taskQueue', 1);

    // Clear all tasks from the object store
    await db.clear('tasks');
    
    console.log('Queued tasks cleared successfully');
  } catch (error) {
    console.error('Error clearing queued tasks:', error);
  }
}
